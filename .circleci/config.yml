version: 2.1

orbs:
  slack: circleci/slack@4.4.2
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo s3://udapeople-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: migration_<< parameters.workflow_id >>" --request GET https://api.memstash.io/values/db_migration_status)
            if [ "$SUCCESS" == "1" ]; then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install frontend dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Test frontend code
          command: |
            cd frontend
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1       

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install backend dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Test backend code
          command: |
            cd backend
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
          
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install frontend dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Scan frontend code for vulnerability
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
          
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install backend dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Scan backend code for vulnerability
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
          
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar gzip
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Put public backend EC2 instance dns name to https://memstash.io/
          command: |
            PUBLIC_EC2_DNS_NAME=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters Name=tag:project,Values=udapeople-backend --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo ${PUBLIC_EC2_DNS_NAME}
            echo ${CIRCLE_WORKFLOW_ID}
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data ${PUBLIC_EC2_DNS_NAME} https://api.memstash.io/values/public_backend_ec2_dns
      - run:
          name: Put EC2 BACKEND_IP to https://memstash.io/
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --region ${AWS_DEFAULT_REGION} --filters Name=tag:project,Values=udapeople-backend --query "Reservations[*].Instances[0].PublicIpAddress" --output text)
            echo ${BACKEND_IP}
            echo ${CIRCLE_WORKFLOW_ID}
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data ${BACKEND_IP} https://api.memstash.io/values/public_backend_ip            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["e4:92:e5:10:23:81:e6:c3:01:73:e5:96:9e:e8:17:38"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
            pip install awscli
            ansible --version
            aws --version
      - run:
          name: Configure server
          command: |
            cat ./.circleci/ansible/inventory.txt
            ansible-playbook -v -i ./.circleci/ansible/inventory.txt ./.circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install awscli
          command: |
            sudo apt-get update
            sudo apt-get -y install awscli
      - run:
          name: Run migrations
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            pwd
            echo "list contents of /home/circleci/project"
            ls -la /home/circleci/project
            echo "list contents of /home/circleci"
            ls -la /home/circleci
            echo "list current folder content"
            ls -la
            cd backend
            echo "running npm install"
            npm install
            echo "running npm run migrations"
            npm run migrations > db_migration_output
            cat db_migration_output
          no_output_timeout: 10m
      - run:
          name: Send db migration success output to memstash
          command: |
            if grep -q "has been executed successfully" backend/db_migration_output
            then
              echo "db migration succeeded"
              echo "migration_${CIRCLE_WORKFLOW_ID}"
              curl -H "Content-Type: text/plain" -H "token: migration_${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/db_migration_status
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install tar gzip
            yum -y install nodejs
      - run:
          name: Get backend url
          command: | 
            export BACKEND_IP=$(curl -H  "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_backend_ip)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL is: ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["e4:92:e5:10:23:81:e6:c3:01:73:e5:96:9e:e8:17:38"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update curl nodejs npm
            apk add --update tar gzip
            ansible --version
            pip install awscli
            ansible --version
            aws --version
      - run:
          name: Deploy backend
          command: |
            mkdir -p .circleci/ansible/roles/deploy/files/
            tar -C backend -czvf backend-artifacts.tar.gz .
            mv backend-artifacts.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -v -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url and do backend smoke test.
          command: |
            BACKEND_IP=$(curl -H  "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/public_backend_ip)
            echo "BACKEND_IP: ${BACKEND_IP}"
            echo "Smoke test URL: http://${BACKEND_IP}:3030/api/status"
            if curl -s http://${BACKEND_IP}:3030/api/status
            then
              echo "pass backend smoke test. again"
              return 0
            else
              echo "fail backend smoke test"
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com/ | grep "Welcome"
            then
              echo "pass frontend smoke test"
              return 0
            else
              echo "fail frontend smoke test"
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo "OldWorkflowID: ${OldWorkflowID}"
            echo "token: oldworkflow_${OldWorkflowID}"
            curl -H "Content-Type: text/plain" -H "token: oldworkflow_${CIRCLE_WORKFLOW_ID}" --request PUT --data "${OldWorkflowID}" https://api.memstash.io/values/oldworkflowid
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" --stack-name udapeople-cloudfront --tags project=udapeople
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
          
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and remove old stacks and files
          command: |
            OldWorkflowID=$(curl -H  "token: oldworkflow_${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/oldworkflowid)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo "OldWorkflowID: ${OldWorkflowID}"
            printf '%s\n' "${STACKS[@]}"

            if [ ! -z $OldWorkflowID ]
            then
              if [[ "${OldWorkflowID}" != "${CIRCLE_WORKFLOW_ID:0:7}" ]]
              then
                if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
                then
                  echo "Remove s3://udapeople-${OldWorkflowID}"
                  aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                  echo "Remove stack udapeople-backend-${OldWorkflowID}"
                  aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                  echo "Remove stack udapeople-frontend-${OldWorkflowID}"
                  aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                fi
              fi
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
